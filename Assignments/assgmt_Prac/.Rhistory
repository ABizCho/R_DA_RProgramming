award <- append(award, award_i) #누적
}
award
library(stringr)
str_trim(award)
award <- str_trim(award)
award
url <- "https://www.coursera.org/browse/business"
urls <- paste(url,i,sep="")
html_source = read_html(urls)
# review
bestCert <-html_nodes(html_source, '.aria-label') #리뷰위치
# review
bestCert <-html_nodes(html_source, '.aria-label') #리뷰위치
bestCert_i <- html_text(bestCert) #텍스트 추출
#누적
bestCert_i
url <- "https://www.coursera.org/browse/business"
html_source = read_html(url)
# review
bestCert <-html_nodes(html_source, '.aria-label') #리뷰위치
bestCert_i <- html_text(bestCert) #텍스트 추출
#누적
bestCert_i
review <-NULL #반복문으로 크롤링한 모든 리뷰를 모두 한곳에 할당하기 위한 변수 review를 선언
star <- NULL #반복문으로 크롤링한 모든 별점을 모두 한곳에 할당하기 위한 변수 star를 선언
date <- NULL ##반복문으로 크롤링한 모든 날짜를 모두 한곳에 할당하기 위한 변수 date를 선언
for (i in 1:10){
url <- "https://movie.daum.net/moviedb/grade?movieId=87215&type=netizen&page="   #반복문으로 크롤링 해올 페이지들을 하나하나 입력하지 않고 해당하는 주소처럼 query부분(page= 이후)을 비워두고 url에 할당하여 반복문의 i횟수에 맞게 i를 할당하여 크롤링하여 페이지를 넘기는식으로 크롤링하고자 합니다
urls <- paste(url,i,sep="") # url과 i를 합쳐 반복문을 활용한 연속되는 다른페이지를 크롤링해오고자 paste를 활용합니다.
html_source = read_html(urls)   #read_html을 사용하여 반복문 내에서합성된 urls를 읽어들입니다
# review
review_nodes <-html_nodes(html_source, 'p.desc_review') #개발자환경에서 html code를 분석해본 결과 크롤링하고자하는 review는 p항목 아래에 있는 desc_review 항목으로 존재합니다.
review_i <- html_text(review_nodes) #텍스트 추출 : 위에서 p.desc_reivew를 저장한 것중 text만 따로 저장합니다
review <- append(review, review_i) #누적 : text만 따로 저장한것을 반복문 위에서 미리 선언해둔 review변수와 합쳐주는 방식으로 반복문마다 하나씩 추가시킵니다.
#rating
star_nodes <- html_nodes(html_source, 'em.emph_grade') #개발자환경에서 html code를 분석해본 결과 크롤링하고자하는 별점는 em항목 아래에 있는 emph_grade 항목으로 존재합니다.
star_i <- html_text(star_nodes) #텍스트 추출 : 위에서 em.emph_grade 를 저장한 것중 text만 따로 저장합니다
star <- append(star,star_i) #누적 : text만 따로 저장한것을 반복문 위에서 미리 선언해둔 star 변수와 합쳐주는 방식으로 반복문마다 하나씩 추가시킵니다.
# date
date_nodes = html_nodes(html_source, 'span.info_append') ##개발자환경에서 html code를 분석해본 결과 크롤링하고자하는 날짜는 span항목 아래에 있는 info_append 항목으로 존재합니다.
date_i <- html_text(date_nodes) #텍스트 추출 : 위에서 span.info_append 를 저장한 것중 text만 따로 저장합니다
date <- append(date,date_i) #누적 : text만 따로 저장한것을 반복문 위에서 미리 선언해둔 date 변수와 합쳐주는 방식으로 반복문마다 하나씩 추가시킵니다.
}
daum_m
str(daum_m)
library(httr)
library(rvest)
library(stringr)
award <- NULL
for (i in 1:10){
url <- "https://movie.daum.net/moviedb/award?movieId=87215&page="
urls <- paste(url,i,sep="")
html_source = read_html(urls)
# review
award_nodes <-html_nodes(html_source, '.tit_movie') #리뷰위치
award_i <- html_text(award_nodes) #텍스트 추출
award <- append(award, award_i) #누적
}
library(httr)
library(rvest)
library(stringr)
award <- NULL
for (i in 1:10){
url <- "https://movie.daum.net/moviedb/award?movieId=87215&page="
urls <- paste(url,i,sep="")
html_source = read_html(urls)
# review
award_nodes <-html_nodes(html_source, '.tit_movie') #리뷰위치
award_i <- html_text(award_nodes) #텍스트 추출
award <- append(award, award_i) #누적
}
library(httr)
library(rvest)
library(stringr)
award <- NULL
for (i in 1:10){
url <- "https://movie.daum.net/moviedb/award?movieId=87215&page="
urls <- paste(url,i,sep="")
html_source = read_html(urls)
# review
award_nodes <-html_nodes(html_source, '.tit_movie') #리뷰위치
award_i <- html_text(award_nodes) #텍스트 추출
award <- append(award, award_i) #누적
}
library(httr)
library(rvest)
library(stringr)
award <- NULL
for (i in 1:10){
url <- "https://movie.daum.net/moviedb/award?movieId=87215&page="
urls <- paste(url,i,sep="")
html_source = read_html(urls)
# review
award_nodes <-html_nodes(html_source, '.tit_movie') #리뷰위치
award_i <- html_text(award_nodes) #텍스트 추출
award <- append(award, award_i) #누적
}
library(httr)
library(rvest)
library(stringr)
award <- NULL
for (i in 1:5){
url <- "https://movie.daum.net/moviedb/award?movieId=87215&page="
urls <- paste(url,i,sep="")
html_source = read_html(urls)
# review
award_nodes <-html_nodes(html_source, '.tit_movie') #리뷰위치
award_i <- html_text(award_nodes) #텍스트 추출
award <- append(award, award_i) #누적
}
award <- str_trim(award)
award
library(rvest)
library(httr)
library(stringr)
url_base<-"https://movie.daum.net/moviedb/grade?movieId=87215&type=netizen&page="
for (i in 1:811){
url<- paste0(url_base,i)
htxt <- read_html(url)
user <- html_nodes(htxt,'.link_profile') %>% html_text()
grade<- html_nodes(htxt,'.emph_grade') %>% html_text()
review <- html_nodes(htxt,'.desc_review') %>% html_text()
page <-data.frame(user,grade,review)
total_review <- rbind(total_review,page)
}
library(rvest)
library(httr)
library(stringr)
url_base<-"https://movie.daum.net/moviedb/grade?movieId=87215&type=netizen&page="
for (i in 1:811){
url<- paste0(url_base,i)
htxt <- read_html(url)
user <- html_nodes(htxt,'.link_profile') %>% html_text()
grade<- html_nodes(htxt,'.emph_grade') %>% html_text()
review <- html_nodes(htxt,'.desc_review') %>% html_text()
page <-data.frame(user,grade,review)
total_review <- rbind(total_review,page)
}
write.csv(total_review,"pages.csv")
a <- read.csv("pages.csv")
str(a)
a
url_base<-"https://movie.daum.net/moviedb/grade?movieId=87215&type=netizen&page=" #네티즌의
span <- read_html(url_base)
span <- html_nodes('.txt_menu') %>% html_text()
span <- gsub(",","",span)
as.numeric(span)
for (i in 1:span){
url<- paste0(url_base,i)
htxt <- read_html(url)
user <- html_nodes(htxt,'.link_profile') %>% html_text()
grade<- html_nodes(htxt,'.emph_grade') %>% html_text()
review <- html_nodes(htxt,'.desc_review') %>% html_text()
page <-data.frame(user,grade,review)
total_review <- rbind(total_review,page)
}
write.csv(total_review,"pages.csv")
total_review
str(total_reivew)
str(total_review)
span
span <- html_nodes('.screen_out') %>% html_text()
span <- gsub(",","",span)
as.numeric(span)
span
url_base<-"https://movie.daum.net/moviedb/grade?movieId=87215&type=netizen&page=" #네티즌의
span <- read_html(url_base)
span <- html_nodes('.num_review') %>% html_text()
span <- read_html(url_base)
span <- html_nodes('.num_review') %>% html_text()
span <- gsub(",","",span)
as.numeric(span)
span
url_base<-"https://movie.daum.net/moviedb/grade?movieId=87215&type=netizen&page=" #네티즌의
span <- read_html(url_base)
span <- html_nodes('span.txt_menu') %>% html_text()
span <- gsub(",","",span)
as.numeric(span)
span
url_base<-"https://movie.daum.net/moviedb/grade?movieId=87215&type=netizen&page=1"
span <- read_html(url_base)
span <- html_nodes('span.txt_menu') %>% html_text()
span <- gsub(",","",span)
as.numeric(span)
span
install.packages("igraph")
library(igraph)
help("igraph")
graph_from_literal()
a <- graph_from_literal()
a
b <- graph_from_literal(a--b)
b
b <- graph_from_literal(a--b,c--d,d--e)
b
igraph:graph(edges=c(1,2,2,3,3,4,4,5,6),n=3,directed=F)
igraph::graph(edges=c(1,2,2,3,3,4,4,5,6),n=3,directed=F)
igraph::graph(edges=c(1,2,2,3,3,4,4,5,6),n=2,directed=F)
igraph::graph(edges=c(1,2,2,3,3,4,4,5),n=2,directed=F)
a <- igraph::graph(edges=c(1,2,2,3,3,4,4,5),n=2,directed=F)
plot(a)
a <- igraph::graph(edges=c(1,2,2,3,3,4,4,5,5,1),n=2,directed=F)
plot(a)
b <- igraph::graph_from_literal(1--2:10)
plot(b)
b <- igraph::graph_from_literal(1--2:3:4:5:6:7:8:9:10)
plot(b)
b <- igraph::graph_from_literal(1-----2:3:4:5:6:7:8:9:10)
plot(b)
b <- igraph::graph_from_literal(1-----+2:3:4:5:6:7:8:9:10)
plot(b)
b <- igraph::graph_from_literal(1+-----2:3:4:5:6:7:8:9:10)
plot(b)
b <- igraph::graph_from_literal(1+-----+2:3:4:5:6:7:8:9:10)
plot(b)
a <- igraph::graph(edges=c(1,2,2,3,3,4,4,5,5,1),n=3,directed=F)
plot(a)
a <- igraph::graph(edges=c(1,2,2,3),n=3,directed=F)
plot(a)
a <- igraph::graph(edges=c(1,2,2,3),n=4,directed=F)
plot(a)
a <- igraph::graph(edges=c(1,2,2,3),n=5,directed=F)
plot(a)
a <- igraph::graph(edges=c(1,2,2,3),n=100,directed=F)
plot(a)
a <- igraph::graph(edges=c(1,2,2,3),n=1,directed=F)
plot(a)
a <- igraph::graph(edges=c(1,2,2,3),n=4,directed=F)
plot(a)
a <- igraph::graph(edges=c(1,2,2,3,4),n=4,directed=F)
graph_from_literal(default)
graph_from_literal()
graph_from_literal("강주영교수님"+----+"안상호조교님","강주영교수님"----+"학생1":"학생2":"학생3":"학생4","안상호조교님"+---+"학생1":"학생2":"학생3","학생4")
graph_from_literal("강주영교수님"+----+"안상호조교님","강주영교수님"----+"학생1":"학생2":"학생3":"학생4","강주영교수님"+----"학생1":"학생2":"학생3","안상호조교님"+---+"학생1":"학생2":"학생3","학생4","")
c <- graph_from_literal("강주영교수님"+----+"안상호조교님","강주영교수님"----+"학생1":"학생2":"학생3":"학생4","강주영교수님"+----"학생1":"학생2":"학생3","안상호조교님"+---+"학생1":"학생2":"학생3","학생4","")
plot(cc)
plot(c)
c <- graph_from_literal("주강영교수님"+----+"안상호조교님","강주영교수님"----+"학생1":"학생2":"학생3":"학생4","강주영교수님"+----"학생1":"학생2":"학생3","안상호조교님"+---+"학생1":"학생2":"학생3","학생4")
plot(c)
c <- graph_from_literal("강주영교수님"+----+"안상호조교님","강주영교수님"----+"학생1":"학생2":"학생3":"학생4","강주영교수님"+----"학생1":"학생2":"학생3","안상호조교님"+---+"학생1":"학생2":"학생3","학생4")
plot(c)
V(c)
str(c)
E(C)
E(c)
install.packages("RCurl")
library(devtools)
nstall.packages("d3Network")
install.packages("d3Network")
library(RCurl)
library(d3Network)
name <- c("Angela","Jessica","Winona","Michelle",
"Whoopi","Emma","Julia","Sharon","Meryl",
"Susan","Nicole")
pemp <- c("Angela","Angela","Jessica","Winona","Winona",
"Angela","Emma","Julia","Angela",
"Meryl","Susan")
emp <- data.frame(이름=name,상사이름=pemp)
d3SimpleNetwork(emp,width=600,height=600)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
graph(edges='a','b','b','c',n=10,directed=T)
graph(edges='a','b','b','c',n=10)
graph(edges='a','b','b','c')
graph(edges=c('a','b','b','c'))
a <- graph(edges=c('a','b','b','c'))
plot(a)
str(a)
a <- graph(edges=c(1,2,2,3,3,4,5,6)
a <- graph(edges=c(1,2,2,3,3,4,5,6))
a <- graph(edges=c(1,2,2,3,3,4,5)
a <- graph(edges=c(1,2,2,3,3,4,5))
a <- graph(c(1,2,2,3,3,4,5))
a <- graph(c(1,2,2,3,3,4,5,6))
A
a
plot(a)
str(a)
emp <- data.frame(이름=name,상사이름=pemp)
emp
graph.data.frame(emp,directed=T)
d <- graph.data.frame(emp,directed=T)
plot(d)
install.packages("lsa")
install.packages("igraph")
library(lsa)
library(igraph)
winedata <- read.csv("WineKMC.csv")
winedata[is.na(winedata)] <- 0
winedata.transposed <- t(winedata[,8:107])
winedata.cos <- cosine(t(winedata.transposed))
n <- nrow(winedata.transposed)
for(i in 1:n){winedata.cos[i,i]=0}
winedata.cos1 <- as.vector(winedata.cos)
length(winedata.cos[winedata.cos1>0])
2950*0.2
sort(winedata.cos[winedata.cos >0], decreasing=TRUE)[590]
winedata.cutoff <- winedata.cos
winedata.cutoff[winedata.cutoff>=0.5]<- 1
winedata.cutoff[winedata.cutoff<0.5]<- 0
winedata.graph <- graph.adjacency(winedata.cutoff,weighted=NULL,mode="undirected")
winedata.wtc <- walktrap.community(winedata.graph)
membership(winedata.wtc)
winedata.graphclusters <- membership(winedata.wtc)
winedata.graphcluster <- as.integer(winedata.graphclusters)
winedata.clustercount <- t(aggregate(winedata.transposed,by=list(winedata.graphcluster),sum)[,2:33])
winedata.desc.plus.counts <- cbind(winedata[,1:7],winedata.clustercount)
winedata.desc.plus.counts[order(-winedata.desc.plus.counts[,8]),]
install.packages("igraph")
m %>% addCircleMarkers(126.9860,37.54100,color="#496ff5")  #circlemarkers 사용
m = leaflet() %>% addTiles()
m = m %>% setView(126.9860,37.54100,zoom=15) #서울의 경도와 위도 설정
m %>% addCircleMarkers(126.9860,37.54100,color="#496ff5")  #circlemarkers 사용
library(leaflet)
library(dplyr)
m = leaflet() %>% addTiles()
m = m %>% setView(126.9860,37.54100,zoom=15) #서울의 경도와 위도 설정
m %>% addCircleMarkers(126.9860,37.54100,color="#496ff5")  #circlemarkers 사용
m %>% addCircleMarkers(126.9860,37.54100,color="red")  #circlemarkers 사용
m %>% addCircleMarkers(126.9860,37.54100,color="red",fill=TRUE,fillColor=color)  #circleMarkers 사용
m %>% addCircleMarkers(126.9860,37.54100,color="red",fill=TRUE,fillColor=color)  #circleMarkers 사용
rm(list=ls())
library(leaflet)
library(dplyr)
setwd("C:\\Users\\JSW\\Desktop\\강의자료\\R프로그래밍\\R 실습 및 과제\\PR")
BC_cust<- read.csv("BGCON_CUST_DATA.csv") #읽어오기
BC_cust1 <- select(BC_cust,CTPR,SIU)
ratiofunc <- function(a,b) {#a 데이터셋 b는 지역명
ratio1 = NULL
ratio1.1 = NULL
ratio1 <- select(subset(a,CTPR==b),SIU)#지역에서 입력지역의 SIU만 추출한 데이터프레임으로 재구성
ratio1.1 <- select(subset(ratio1,SIU=="Y"),SIU)
c <- length(ratio1.1$SIU) / length(ratio1$SIU)
return(c)
}
Region <- c("강원","경기","경남","경북","광주","대구","대전","부산","서울","세종","울산","인천","전남","전북","제주","충남","충북")
ratioGroup <- 0
for (i in 1:length(Region)){
ratioGroup[i] <- ratiofunc(BC_cust1,Region[i])
}
FF <- data.frame(Region,ratioGroup)
FF <-FF[order(FF$ratioGroup),]
rownames(FF) <- NULL
PER<-0 #백분위 계산
totalRG <- for (i in 1:17){
PER[i] <- i/17 *100
}
data.frame(FF,PER)
pal3<-colorBin(palette="YlOrRd", domain=c(0,100), bins = 8, pretty=F, alpha = T)
#-----
class <- c("c1","c1","c2","c2","c3",'c3',"c4",'c4','c5','c5','c6','c6','c7','c7','c8','c8','c8') #기존 데이터프레임의 백분위를 범례의 구간별로 할당할 벡터
classinterval<- c(1,100)
FF<- data.frame(FF,class)
#--------------------------------------
L.L <- read.csv("KOR_LAT_LON.csv")
colnames(L.L)<- c("Region","Lat","Lon")
GG<-NULL
HH<-NULL
for (i in 1:length(FF$Region)){
GG<- L.L[L.L$Region==FF$Region[i],]
H <- GG[,2:3]
HH<-bind_rows(HH,H)
}
FF <- bind_cols(FF,HH)
#--------------------------------------
m=0
m = leaflet() %>% addTiles() %>%
setView(126.9860,37.54100,zoom=7) #snapshot에서 보여줄 경도와 위도 확대정도를 설정
m = m %>% addLegend(pal = pal3,
values  = FF$ratioGroup,
position = "bottomright",
title = "ratio",
labFormat = labelFormat(suffix="%",between="%&ndash;"))
m %>% addCircleMarkers(data=FF,radius=5,color= ~pal(class),)
m %>% addCircleMarkers(data=FF,radius=5,color= ~pal(class),)
library(leaflet)
library(dplyr)
setwd("C:\\Users\\JSW\\Desktop\\강의자료\\R프로그래밍\\R 실습 및 과제\\PR")
BC_cust<- read.csv("BGCON_CUST_DATA.csv") #읽어오기
BC_cust1 <- select(BC_cust,CTPR,SIU)
ratiofunc <- function(a,b) {#a 데이터셋 b는 지역명
ratio1 = NULL
ratio1.1 = NULL
ratio1 <- select(subset(a,CTPR==b),SIU)#지역에서 입력지역의 SIU만 추출한 데이터프레임으로 재구성
ratio1.1 <- select(subset(ratio1,SIU=="Y"),SIU)
c <- length(ratio1.1$SIU) / length(ratio1$SIU)
return(c)
}
Region <- c("강원","경기","경남","경북","광주","대구","대전","부산","서울","세종","울산","인천","전남","전북","제주","충남","충북")
ratioGroup <- 0
for (i in 1:length(Region)){
ratioGroup[i] <- ratiofunc(BC_cust1,Region[i])
}
FF <- data.frame(Region,ratioGroup)
FF <-FF[order(FF$ratioGroup),]
rownames(FF) <- NULL
PER<-0 #백분위 계산
totalRG <- for (i in 1:17){
PER[i] <- i/17 *100
}
data.frame(FF,PER)
pal3<-colorBin(palette="YlOrRd", domain=c(0,100), bins = 8, pretty=F, alpha = T)
#-----
class <- c("c1","c1","c2","c2","c3",'c3',"c4",'c4','c5','c5','c6','c6','c7','c7','c8','c8','c8') #기존 데이터프레임의 백분위를 범례의 구간별로 할당할 벡터
classinterval<- c(1,100)
FF<- data.frame(FF,class)
#--------------------------------------
L.L <- read.csv("KOR_LAT_LON.csv")
colnames(L.L)<- c("Region","Lat","Lon")
GG<-NULL
HH<-NULL
for (i in 1:length(FF$Region)){
GG<- L.L[L.L$Region==FF$Region[i],]
H <- GG[,2:3]
HH<-bind_rows(HH,H)
}
FF <- bind_cols(FF,HH)
#--------------------------------------
m=0
m = leaflet() %>% addTiles() %>%
setView(126.9860,37.54100,zoom=7) #snapshot에서 보여줄 경도와 위도 확대정도를 설정
m = m %>% addLegend(pal = pal3,
values  = FF$ratioGroup,
position = "bottomright",
title = "ratio",
labFormat = labelFormat(suffix="%",between="%&ndash;"))
m %>% addCircleMarkers(data=FF,radius=5,color= ~pal3(class),)
pal <-colorFactor(palette = "YlOrRd",domain=NULL)
m %>% addCircleMarkers(data=FF,radius=5,color= ~pal3(class),)
m %>% addCircleMarkers(data=FF,radius=5,color= ~pal(class),)
pal <-colorFactor(palette = "YlOrRd",domain=NULL)
library(leaflet)
library(dplyr)
setwd("C:\\Users\\JSW\\Desktop\\강의자료\\R프로그래밍\\R 실습 및 과제\\PR")
BC_cust<- read.csv("BGCON_CUST_DATA.csv") #읽어오기
BC_cust1 <- select(BC_cust,CTPR,SIU)
ratiofunc <- function(a,b) {#a 데이터셋 b는 지역명
ratio1 = NULL
ratio1.1 = NULL
ratio1 <- select(subset(a,CTPR==b),SIU)#지역에서 입력지역의 SIU만 추출한 데이터프레임으로 재구성
ratio1.1 <- select(subset(ratio1,SIU=="Y"),SIU)
c <- length(ratio1.1$SIU) / length(ratio1$SIU)
return(c)
}
Region <- c("강원","경기","경남","경북","광주","대구","대전","부산","서울","세종","울산","인천","전남","전북","제주","충남","충북")
ratioGroup <- 0
for (i in 1:length(Region)){
ratioGroup[i] <- ratiofunc(BC_cust1,Region[i])
}
FF <- data.frame(Region,ratioGroup)
FF <-FF[order(FF$ratioGroup),]
rownames(FF) <- NULL
PER<-0 #백분위 계산
totalRG <- for (i in 1:17){
PER[i] <- i/17 *100
}
data.frame(FF,PER)
#-----
pal3<-colorBin(palette="YlOrRd", domain=c(0,100), bins = 8, pretty=F, alpha = T)
pal <-colorFactor(palette = "YlOrRd",domain=NULL)
#-----
class <- c("c1","c1","c2","c2","c3",'c3',"c4",'c4','c5','c5','c6','c6','c7','c7','c8','c8','c8') #기존 데이터프레임의 백분위를 범례의 구간별로 할당할 벡터
# C1: 0 - 15
# C2: 15- 25
# C3: 25 - 38
# C4: 38 - 50
# C5: 50 - 62
# C6: 62 - 75
# C7: 75 - 88
# C8: 88 - 100
classinterval<- c(1,100)
FF<- data.frame(FF,class)
#--------------------------------------
L.L <- read.csv("KOR_LAT_LON.csv")
colnames(L.L)<- c("Region","Lat","Lon")
GG<-NULL
HH<-NULL
for (i in 1:length(FF$Region)){
GG<- L.L[L.L$Region==FF$Region[i],]
H <- GG[,2:3]
HH<-bind_rows(HH,H)
}
FF <- bind_cols(FF,HH)
#--------------------------------------
m=0
m = leaflet() %>% addTiles() %>%
setView(126.9860,37.54100,zoom=7) #snapshot에서 보여줄 경도와 위도 확대정도를 설정
m = m %>% addLegend(pal = pal3,
values  = FF$ratioGroup,
position = "bottomright",
title = "ratio",
labFormat = labelFormat(suffix="%",between="%&ndash;"))
m %>% addCircleMarkers(data=FF,radius=5,color= ~pal(class),)
Region <- FF$CTPR
ratioGroup <- 0
for (i in 1:length(Region)){
ratioGroup[i] <- ratiofunc(BC_cust1,Region[i])
}
FF <- data.frame(Region,ratioGroup)
FF <-FF[order(FF$ratioGroup),]
FF$CTPR
Region <- BG_cust$CTPR
ratioGroup <- 0
Region <- BC_cust$CTPR
ratioGroup <- 0
for (i in 1:length(Region)){
ratioGroup[i] <- ratiofunc(BC_cust1,Region[i])
}
BC_cust$CTPR
BC_cust$CTPR
/
data.frame(FF,PER)
