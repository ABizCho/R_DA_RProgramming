result <- matrix(NA,239,239)
result
for (a in 1:239){
for (i in 1:239){
result[i,a] <- sum(c[a,]*c[i,])}}
str(result)
d <- data.frame(result,stringsAsFactors = F)
d
work.data <- function(x){   #csv파일의 전처리 및 데이터프레임화시키는 함수를 define
x <- unlist(x)
x <- strsplit(x,split="\t")   #csv파일에서 셀을 \t를 기준으로
x <- unlist(x)
x <- matrix(x,ncol=3,,byrow=T)
x <- data.frame(x,stringsAsFactors = F)
x <- sapply(x,function(x){gsub("찬성","1",x)},simplify = F)
x <- sapply(x,function(x){gsub("반대","-1",x)},simplify = F)
x <- sapply(x,function(x){gsub("기권","0",x)},simplify = F)
gsub("찬성","1",x)
x <- data.frame(x,stringsAsFactors = F)
x$X3 <- as.numeric(x$X3)
colnames(x) <- c("name","party","vote")
return(x)
}
item1 <- read.csv(header=F,"item1.csv",stringsAsFactors = F) #csv불러오기
item2 <- read.csv(header=F,"item2.csv",stringsAsFactors = F)
item3 <- read.csv(header=F,"item3.csv",stringsAsFactors = F)
item4 <- read.csv(header=F,"item4.csv",stringsAsFactors = F)
item5 <- read.csv(header=F,"item5.csv",stringsAsFactors = F)
item6 <- read.csv(header=F,"item6.csv",stringsAsFactors = F)
item7 <- read.csv(header=F,"item7.csv",stringsAsFactors = F)
item8 <- read.csv(header=F,"item8.csv",stringsAsFactors = F)
item9 <- read.csv(header=F,"item9.csv",stringsAsFactors = F)
item10 <- read.csv(header=F,"item10.csv",stringsAsFactors = F)
item1 <- work.data(item1)  # 아까만든 전처리함수를 call
item2 <- work.data(item2)
item3 <- work.data(item3)
item4 <- work.data(item4)
item5 <- work.data(item5)
item6 <- work.data(item6)
item7 <- work.data(item7)
item8 <- work.data(item8)
item9 <- work.data(item9)
item10 <- work.data(item10)
work.data <- function(x){   #csv파일을 전처리 및 데이터프레임화시키는 함수를 define
x <- unlist(x)
x <- strsplit(x,split="\t")   #엑셀의 csv파일에서 직접 불러와지지않아 메모장에 옮긴 후 ANSI로 인코딩하여 불러왔습니다 이 과정에서 열이 구분되지 않은 데이터셋이 되었기 때문에 CSV를 불러왔을 때 \t를 기준으로 데이터가 구분되어있습니다. 이를 다시 알맞게 구분된 원래의 데이터프레임을 만들기 위한 코드입니다.
x <- unlist(x)
x <- matrix(x,ncol=3,,byrow=T)
x <- data.frame(x,stringsAsFactors = F)
x <- sapply(x,function(x){gsub("찬성","1",x)},simplify = F)  #찬성 반대 기권을 숫자형 데이터로 바꿔주는 함수를 sapply로 실행해줍니다.
x <- sapply(x,function(x){gsub("반대","-1",x)},simplify = F)
x <- sapply(x,function(x){gsub("기권","0",x)},simplify = F)
gsub("찬성","1",x)
x <- data.frame(x,stringsAsFactors = F)
x$X3 <- as.numeric(x$X3)
colnames(x) <- c("name","party","vote")
return(x)
}
item1 <- read.csv(header=F,"item1.csv",stringsAsFactors = F) #csv불러오기
item2 <- read.csv(header=F,"item2.csv",stringsAsFactors = F)
item3 <- read.csv(header=F,"item3.csv",stringsAsFactors = F)
item4 <- read.csv(header=F,"item4.csv",stringsAsFactors = F)
item5 <- read.csv(header=F,"item5.csv",stringsAsFactors = F)
item6 <- read.csv(header=F,"item6.csv",stringsAsFactors = F)
item7 <- read.csv(header=F,"item7.csv",stringsAsFactors = F)
item8 <- read.csv(header=F,"item8.csv",stringsAsFactors = F)
item9 <- read.csv(header=F,"item9.csv",stringsAsFactors = F)
item10 <- read.csv(header=F,"item10.csv",stringsAsFactors = F)
item1 <- work.data(item1)  # 아까만든 전처리함수를 call
item2 <- work.data(item2)
item3 <- work.data(item3)
item4 <- work.data(item4)
item5 <- work.data(item5)
item6 <- work.data(item6)
item7 <- work.data(item7)
item8 <- work.data(item8)
item9 <- work.data(item9)
item10 <- work.data(item10)
getwd()
setwd("C:\\Users\\JSW\\Desktop\\강의자료\\R프로그래밍\\R 실습 및 과제\\HW\\HW안내및소스\\HW1\\1-2")
virtualData <- read.csv(header=F,"virtualData.csv",stringsAsFactors = F)
str(virtualData)
virtualData
getwd()
setwd("C:\\Users\\JSW\\Desktop\\강의자료\\R프로그래밍\\R 실습 및 과제\\HW\\HW안내및소스\\HW1\\1-2")
virtualData <- read.csv(header=F,"virtualData.csv",stringsAsFactors = F)
str(virtualData)
getwd()
setwd("C:\\Users\\JSW\\Desktop\\강의자료\\R프로그래밍\\R 실습 및 과제\\HW\\HW안내및소스\\HW1\\1-2")
virtualData <- read.csv(header=F,"virtualData.csv",stringsAsFactors = F)
str(virtualData)
data.frame(virtualData,stringsAsFactors = F)
getwd()
setwd("C:\\Users\\JSW\\Desktop\\강의자료\\R프로그래밍\\R 실습 및 과제\\HW\\HW안내및소스\\HW1\\1-2")
virtualData <- read.csv(header=F,"virtualData.csv",stringsAsFactors = F)
str(virtualData)
data.frame(virtualData,stringsAsFactors = F)
getwd()
setwd("C:\\Users\\JSW\\Desktop\\강의자료\\R프로그래밍\\R 실습 및 과제\\HW\\HW안내및소스\\HW1\\1-2")
virtualData <- read.csv(header=F,"virtualData.csv",stringsAsFactors = F)
str(virtualData)
data.frame(virtualData,stringsAsFactors = F)
getwd()
setwd("C:\\Users\\JSW\\Desktop\\강의자료\\R프로그래밍\\R 실습 및 과제\\HW\\HW안내및소스\\HW1\\1-2")
virtualData <- read.csv(header=F,"virtualData.csv",stringsAsFactors = F)
virtualData
getwd()
setwd("C:\\Users\\JSW\\Desktop\\강의자료\\R프로그래밍\\R 실습 및 과제\\HW\\HW안내및소스\\HW1\\1-2")
virtualData <- read.csv(header=F,"virtualData.csv",stringsAsFactors = F)
str(virtualData)
#새로 데이터프레임을 만들지 않고 받아온 데이터를 그대로 사용하려고 노력했습니다.
#이 과정에서 문제1과 문제2의 해결 순서가 바뀌게 됐습니다.
#감안하고 봐주시면 감사하곘습니다.
#문제 2 : 전처리
virtualData <- sapply(virtualData,function(x){gsub("찬성","1",x)})
virtualData <- sapply(virtualData,function(x){gsub("반대","-1",x)})
virtualData <- sapply(virtualData,function(x){gsub("기권","0",x)})
virtualData0 <- as.numeric(virtualData) #숫자형 데이터셋으로 변경
virtualData0[is.na(virtualData0)] <-virtualData0[is.na(virtualData0)] <- 0 #NA값을 0으로 바꿔준다
member <- virtualData[1:10]
party <- virtualData[11:20]
item1 <- virtualData0[21:30]
item2 <- virtualData0[31:40]
item3 <- virtualData0[41:50]
item4 <- virtualData0[51:60]
item5 <- virtualData0[61:70]
item6 <- virtualData0[71:80]
item7 <- virtualData0[81:90]
item8 <- virtualData0[91:100]
workedVD<- data.frame(member,party,item1,item2,item3,item4,item5,item6,item7,item8,stringsAsFactors = F) # 전처리가 완료된 데이터프레임 생성
workedVD <- workedVD[,2:10]
workedVD
str(workedVD)
#새로 데이터프레임을 만들지 않고 받아온 데이터를 그대로 사용하려고 노력했습니다.
#이 과정에서 문제1과 문제2의 해결 순서가 바뀌게 됐습니다.
#감안하고 봐주시면 감사하곘습니다.
#문제 2 : 전처리
virtualData <- sapply(virtualData,function(x){gsub("찬성","1",x)})
virtualData <- sapply(virtualData,function(x){gsub("반대","-1",x)})
virtualData <- sapply(virtualData,function(x){gsub("기권","0",x)})
virtualData0 <- as.numeric(virtualData) #숫자형 데이터셋으로 변경
virtualData0[is.na(virtualData0)] <-virtualData0[is.na(virtualData0)] <- 0 #NA값을 0으로 바꿔준다
member <- virtualData[1:10] #기존의 데이터프레임 구성에 맞게 변수에 데이터를 재구성시켜줍니다.
party <- virtualData[11:20]
item1 <- virtualData0[21:30]
item2 <- virtualData0[31:40]
item3 <- virtualData0[41:50]
item4 <- virtualData0[51:60]
item5 <- virtualData0[61:70]
item6 <- virtualData0[71:80]
item7 <- virtualData0[81:90]
item8 <- virtualData0[91:100]
workedVD<- data.frame(member,party,item1,item2,item3,item4,item5,item6,item7,item8,stringsAsFactors = F) # 전처리가 완료된 데이터프레임 생성
workedVD <- workedVD[,2:10]
workedVD
str(workedVD)
a <- merge(item1,item2,by='name',all.x= TRUE)
a <- merge(a,item3,by='name',all.x=TRUE)
a <- merge(a,item4,by='name',all.x=TRUE)
a <- merge(a,item5,by='name',all.x=TRUE)
a <- merge(a,item6,by='name',all.x=TRUE)
a <- merge(a,item7,by='name',all.x=TRUE)
a <- merge(a,item8,by='name',all.x=TRUE)
a <- merge(a,item9,by='name',all.x=TRUE)
a <- merge(a,item10,by='name',all.x=TRUE)
a <- merge(item1,item2,by='name',all.x= TRUE)
a <- merge(a,item3,by='name',all.x=TRUE)
a <- merge(a,item4,by='name',all.x=TRUE)
a <- merge(a,item5,by='name',all.x=TRUE)
a <- merge(a,item6,by='name',all.x=TRUE)
a <- merge(a,item7,by='name',all.x=TRUE)
a <- merge(a,item8,by='name',all.x=TRUE)
a <- merge(a,item9,by='name',all.x=TRUE)
a <- merge(a,item10,by='name',all.x=TRUE)
s
a
a <- merge(item1,item2,by='name',all.x= TRUE)
a <- merge(a,item3,by='name',all.x=TRUE)
a <- merge(a,item4,by='name',all.x=TRUE)
a <- merge(a,item5,by='name',all.x=TRUE)
a <- merge(a,item6,by='name',all.x=TRUE)
a <- merge(a,item7,by='name',all.x=TRUE)
a <- merge(a,item8,by='name',all.x=TRUE)
a <- merge(a,item9,by='name',all.x=TRUE)
b <- a[,c(1,2,3,5,7,9,11,13,15,17,19,21)]
colnames(b) <- c('name','party','vote1','vote2','vote3','vote4','vote5','vote6','vote7','vote8','vote9','vote10')
b
a <- merge(item1,item2,by='name',all.x= TRUE)
a <- merge(item1,item2,by='name',all= TRUE)
a <- merge(a,item3,by='name',all=TRUE)
a <- merge(a,item4,by='name',all=TRUE)
a <- merge(a,item5,by='name',all=TRUE)
a <- merge(a,item6,by='name',all=TRUE)
a <- merge(a,item7,by='name',all=TRUE)
a <- merge(a,item8,by='name',all=TRUE)
a <- merge(a,item9,by='name',all=TRUE)
a <- merge(a,item10,by='name',all=TRUE)
b <- a[,c(1,2,3,5,7,9,11,13,15,17,19,21)]
colnames(b) <- c('name','party','vote1','vote2','vote3','vote4','vote5','vote6','vote7','vote8','vote9','vote10')
b
b[is.na(b)] <-b[is.na(b)] <- 0 #na값을 0으로 만들어줍니다
b
c <- b[,-c(1:2)] #계산을 위해 name, party 잠시 배제
str(c)
length(c)
result <- matrix(NA,239,239)
result
for (a in 1:239){
for (i in 1:239){
result[i,a] <- sum(c[a,]*c[i,])}}
result
b[is.na(b)] <-b[is.na(b)] <- 0 #na값을 0으로 만들어줍니다
b
c <- b[,-c(1:2)] #계산을 위해 name, party 잠시 배제
str(c)
length(c)
result <- matrix(NA,239,239)
result
for (a in 1:239){
for (i in 1:239){
result[i,a] <- sum(c[a,]*c[i,])}}
str(result)
df.result<- data.frame(result,stringsAsFactors = F)
str(df.result)
str(df.result)
a <- merge(item1,item2,by='name')
a <- merge(a,item3,by='name')
a <- merge(a,item4,by='name')
a <- merge(a,item5,by='name')
a <- merge(a,item6,by='name')
a <- merge(a,item7,by='name')
a <- merge(a,item8,by='name')
a <- merge(a,item9,by='name')
a <- merge(a,item10,by='name')
b <- a[,c(1,2,3,5,7,9,11,13,15,17,19,21)]
colnames(b) <- c('name','party','vote1','vote2','vote3','vote4','vote5','vote6','vote7','vote8','vote9','vote10')
b
b[is.na(b)] <-b[is.na(b)] <- 0 #na값을 0으로 만들어줍니다
b
c <- b[,-c(1:2)] #계산을 위해 name, party 잠시 배제
str(c)
length(c)
result <- matrix(NA,239,239)
result
for (a in 1:239){
for (i in 1:239){
result[i,a] <- sum(c[a,]*c[i,])}}
result
#item1을 기준 데이터 프레임으로
merged.item <- merge(item1,item2,by='name',all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
a <- merge(item1,item2,by='name',all.x= TRUE)
a <- merge(a,item3,by='name',all.x=TRUE)
a <- merge(a,item4,by='name',all.x=TRUE)
a <- merge(a,item5,by='name',all.x=TRUE)
a <- merge(a,item6,by='name',all.x=TRUE)
a <- merge(a,item7,by='name',all.x=TRUE)
a <- merge(a,item8,by='name',all.x=TRUE)
a <- merge(a,item4,by='name',all.x=TRUE)
a <- merge(a,item5,by='name',all.x=TRUE)
a <- merge(a,item6,by='name',all.x=TRUE)
a <- merge(a,item7,by='name',all.x=TRUE)
a <- merge(a,item8,by='name',all.x=TRUE)
a <- merge(a,item9,by='name',all.x=TRUE)
a <- merge(a,item10,by='name',all.x=TRUE)
a
merged.item <- merge(item1,item2,by='name',all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merged.item <- merge(merged.item,item3,by='name',all.x=TRUE) #같은방식으로 쭉 merge
merged.item <- merge(merged.item,item4,by='name',all.x=TRUE)
merged.item <- merge(item1,item2,by='name',all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merged.item <- merge.data.frame(item1,item2,by='name',all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merge.data.frame(item1,item2,by='name',all=TRUE)
item1
item1 item2
work.data <- function(x){   #csv파일을 전처리 및 데이터프레임화시키는 함수를 define
x <- unlist(x)
x <- strsplit(x,split="\t")   #엑셀의 csv파일에서 직접 불러와지지않아 메모장에 옮긴 후 ANSI로 인코딩하여 불러왔습니다 이 과정에서 열이 구분되지 않은 데이터셋이 되었기 때문에 CSV를 불러왔을 때 \t를 기준으로 데이터가 구분되어있습니다. 이를 다시 알맞게 구분된 원래의 데이터프레임을 만들기 위한 코드입니다.
x <- unlist(x)
x <- matrix(x,ncol=3,,byrow=T)
x <- data.frame(x,stringsAsFactors = F)
x <- sapply(x,function(x){gsub("찬성","1",x)},simplify = F)  #찬성 반대 기권을 숫자형 데이터로 바꿔주는 함수를 sapply로 실행해줍니다.
x <- sapply(x,function(x){gsub("반대","-1",x)},simplify = F)
x <- sapply(x,function(x){gsub("기권","0",x)},simplify = F)
gsub("찬성","1",x)
x <- data.frame(x,stringsAsFactors = F)
x$X3 <- as.numeric(x$X3)
colnames(x) <- c("name","party","vote")
return(x)
}
item1 <- read.csv(header=F,"item1.csv",stringsAsFactors = F) #csv불러오기
item2 <- read.csv(header=F,"item2.csv",stringsAsFactors = F)
item3 <- read.csv(header=F,"item3.csv",stringsAsFactors = F)
item4 <- read.csv(header=F,"item4.csv",stringsAsFactors = F)
item5 <- read.csv(header=F,"item5.csv",stringsAsFactors = F)
item6 <- read.csv(header=F,"item6.csv",stringsAsFactors = F)
item7 <- read.csv(header=F,"item7.csv",stringsAsFactors = F)
item8 <- read.csv(header=F,"item8.csv",stringsAsFactors = F)
item9 <- read.csv(header=F,"item9.csv",stringsAsFactors = F)
item10 <- read.csv(header=F,"item10.csv",stringsAsFactors = F)
item1 <- work.data(item1)  # 아까만든 전처리함수를 call
item2 <- work.data(item2)
item3 <- work.data(item3)
item4 <- work.data(item4)
item5 <- work.data(item5)
item6 <- work.data(item6)
item7 <- work.data(item7)
item8 <- work.data(item8)
item9 <- work.data(item9)
item10 <- work.data(item10)
merged.item <- merge.data.frame(item1,item2,by='name',all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merged.item <- merge.data.frame(item1,item2,by='name',all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merged.item <- merge(merged.item,item3,by='name',all.x=TRUE) #같은방식으로 쭉 merge
merged.item <- merge(merged.item,item4,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item5,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item6,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item7,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item8,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item9,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item10,by='name',all.x=TRUE)
merged.item <- merged.item[,c(1,2,3,5,7,9,11,13,15,17,19,21)]
colnames(merged.item) <- c('name','party','vote1','vote2','vote3','vote4','vote5','vote6','vote7','vote8','vote9','vote10')
merged.item[is.na(merged.item)] <-merged.item[is.na(merged.item)] <- 0 #na값을 0으로 만들어줍니다
merged.item
merged.item <- merged.item[,-c(1:2)] #계산을 위해 name, party 잠시 배제
str(merged.item)
length(merged.item)
result <- matrix(NA,239,239) #내적곱 계산의 용이성을 위한 행렬 선언 : merged.item의 의원 수가 239명이기 때문에 239x239 행렬을 생성
result
for (a in 1:239){
for (i in 1:239){
result[i,a] <- sum(c[a,]*c[i,])}}
str(result)
df.result<- data.frame(result,stringsAsFactors = F)
str(df.result)
merged.item <- merge.data.frame(item1,item2,by='name',all.x= TRUE) #item1과 item2를 name을 기준
수로하고 merge
work.data <- function(x){   #csv파일을 전처리 및 데이터프레임화시키는 함수를 define
x <- unlist(x)
x <- strsplit(x,split="\t")   #엑셀의 csv파일에서 직접 불러와지지않아 메모장에 옮긴 후 ANSI로 인코딩하여 불러왔습니다 이 과정에서 열이 구분되지 않은 데이터셋이 되었기 때문에 CSV를 불러왔을 때 \t를 기준으로 데이터가 구분되어있습니다. 이를 다시 알맞게 구분된 원래의 데이터프레임을 만들기 위한 코드입니다.
x <- unlist(x)
x <- matrix(x,ncol=3,,byrow=T)
x <- data.frame(x,stringsAsFactors = F)
x <- sapply(x,function(x){gsub("찬성","1",x)},simplify = F)  #찬성 반대 기권을 숫자형 데이터로 바꿔주는 함수를 sapply로 실행해줍니다.
x <- sapply(x,function(x){gsub("반대","-1",x)},simplify = F)
x <- sapply(x,function(x){gsub("기권","0",x)},simplify = F)
gsub("찬성","1",x)
x <- data.frame(x,stringsAsFactors = F)
x$X3 <- as.numeric(x$X3)
colnames(x) <- c("name","party","vote")
return(x)
}
item1 <- read.csv(header=F,"item1.csv",stringsAsFactors = F) #csv불러오기
item2 <- read.csv(header=F,"item2.csv",stringsAsFactors = F)
item3 <- read.csv(header=F,"item3.csv",stringsAsFactors = F)
item4 <- read.csv(header=F,"item4.csv",stringsAsFactors = F)
item5 <- read.csv(header=F,"item5.csv",stringsAsFactors = F)
item6 <- read.csv(header=F,"item6.csv",stringsAsFactors = F)
item7 <- read.csv(header=F,"item7.csv",stringsAsFactors = F)
item8 <- read.csv(header=F,"item8.csv",stringsAsFactors = F)
item9 <- read.csv(header=F,"item9.csv",stringsAsFactors = F)
item10 <- read.csv(header=F,"item10.csv",stringsAsFactors = F)
item1 <- work.data(item1)  # 아까만든 전처리함수를 call
item2 <- work.data(item2)
item3 <- work.data(item3)
item4 <- work.data(item4)
item5 <- work.data(item5)
item6 <- work.data(item6)
item7 <- work.data(item7)
item8 <- work.data(item8)
item9 <- work.data(item9)
item10 <- work.data(item10)
merged.item <- merge(item1,item2,by='name',all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merged.item <- merge(merged.item,item3,by='name',all.x=TRUE) #같은방식으로 쭉 merge
merged.item <- merge(merged.item,item4,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item5,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item6,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item7,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item8,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item9,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item10,by='name',all.x=TRUE)
merged.item <- merged.item[,c(1,2,3,5,7,9,11,13,15,17,19,21)]
colnames(merged.item) <- c('name','party','vote1','vote2','vote3','vote4','vote5','vote6','vote7','vote8','vote9','vote10')
merged.item[is.na(merged.item)] <-merged.item[is.na(merged.item)] <- 0 #na값을 0으로 만들어줍니다
merged.item
merged.item <- merged.item[,-c(1:2)] #계산을 위해 name, party 잠시 배제
str(merged.item)
length(merged.item)
result <- matrix(NA,239,239) #내적곱 계산의 용이성을 위한 행렬 선언 : merged.item의 의원 수가 239명이기 때문에 239x239 행렬을 생성
for (a in 1:239){
for (i in 1:239){
result[i,a] <- sum(c[a,]*c[i,])}}
str(result)
df.result<- data.frame(result,stringsAsFactors = F)
str(df.result)
merged.item <- merge(x=item1,y=item2,by=c('name','party',all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merged.item <- merge(x=item1,y=item2,by=c('name','party'),all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merged.item <- merge(x=item1,y=item2,by=c('name','party'),all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merged.item <- merge(x=item1,y=item2,by='name',all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merged.item <- merge(merged.item,item3,by='name',all.x=TRUE) #같은방식으로 쭉 merge
merged.item <- merge(merged.item,item4,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item5,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item6,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item7,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item8,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item9,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item10,by='name',all.x=TRUE)
colnames(merged.item) <- c('name','party','vote1','vote2','vote3','vote4','vote5','vote6','vote7','vote8','vote9','vote10')
merged.item[is.na(merged.item)] <-merged.item[is.na(merged.item)] <- 0 #na값을 0으로 만들어줍니다
merged.item
merged.item <- merged.item[,-c(1:2)] #계산을 위해 name, party 잠시 배제
str(merged.item)
length(merged.item)
result <- matrix(NA,239,239) #내적곱 계산의 용이성을 위한 행렬 선언 : merged.item의 의원 수가 239명이기 때문에 239x239 행렬을 생성
for (a in 1:239){
for (i in 1:239){
result[i,a] <- sum(c[a,]*c[i,])}}
str(result)
df.result<- data.frame(result,stringsAsFactors = F)
str(df.result)
#새로 데이터프레임을 만들지 않고 받아온 데이터를 그대로 사용하려고 노력했습니다.
#이 과정에서 문제1과 문제2의 해결 순서가 바뀌게 됐습니다.
#감안하고 봐주시면 감사하곘습니다.
#문제 2 : 전처리
virtualData <- sapply(virtualData,function(x){gsub("찬성","1",x)})
virtualData <- sapply(virtualData,function(x){gsub("반대","-1",x)})
virtualData <- sapply(virtualData,function(x){gsub("기권","0",x)})
virtualData0 <- as.numeric(virtualData) #숫자형 데이터셋으로 변경
virtualData0[is.na(virtualData0)] <-virtualData0[is.na(virtualData0)] <- 0 #NA값을 0으로 바꿔준다
member <- virtualData[1:10] #기존의 데이터프레임 구성에 맞게 변수에 데이터를 재구성시켜줍니다.
party <- virtualData[11:20]
item1 <- virtualData0[21:30]
item2 <- virtualData0[31:40]
item3 <- virtualData0[41:50]
item4 <- virtualData0[51:60]
item5 <- virtualData0[61:70]
item6 <- virtualData0[71:80]
item7 <- virtualData0[81:90]
item8 <- virtualData0[91:100]
workedVD<- data.frame(member,party,item1,item2,item3,item4,item5,item6,item7,item8,stringsAsFactors = F) # 전처리가 완료된 데이터프레임 생성
workedVD <- workedVD[,2:10]
workedVD
str(workedVD)
#새로 데이터프레임을 만들지 않고 받아온 데이터를 그대로 사용하려고 노력했습니다.
#이 과정에서 문제1과 문제2의 해결 순서가 바뀌게 됐습니다.
#감안하고 봐주시면 감사하곘습니다.
#문제 2 : 전처리
virtualData <- sapply(virtualData,function(x){gsub("찬성","1",x)})
virtualData <- sapply(virtualData,function(x){gsub("반대","-1",x)})
virtualData <- sapply(virtualData,function(x){gsub("기권","0",x)})
virtualData0 <- as.numeric(virtualData) #숫자형 데이터셋으로 변경
virtualData0[is.na(virtualData0)] <- 0 #NA값을 0으로 바꿔준다
member <- virtualData[1:10] #기존의 데이터프레임 구성에 맞게 변수에 데이터를 재구성시켜줍니다.
party <- virtualData[11:20]
item1 <- virtualData0[21:30]
item2 <- virtualData0[31:40]
item3 <- virtualData0[41:50]
item4 <- virtualData0[51:60]
item5 <- virtualData0[61:70]
item6 <- virtualData0[71:80]
item7 <- virtualData0[81:90]
item8 <- virtualData0[91:100]
workedVD<- data.frame(member,party,item1,item2,item3,item4,item5,item6,item7,item8,stringsAsFactors = F) # 전처리가 완료된 데이터프레임 생성
workedVD <- workedVD[,2:10]
workedVD
str(workedVD)
merged.item <- merge(x=item1,y=item2,by='name',all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merged.item <- merge(x=item1,y=item2,by='name',all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merged.item <- merge(x=item1,y=item2,by='name',all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merged.item <- merge(x=item1,y=item2,by='name',all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merged.item <- merge(merged.item,item3,by='name',all.x=TRUE) #같은방식으로 쭉 merge
merged.item <- merge(merged.item,item4,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item5,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item6,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item7,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item8,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item9,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item10,by='name',all.x=TRUE)
merged.item <- merged.item[,c(1,2,3,5,7,9,11,13,15,17,19,21)]
colnames(merged.item) <- c('name','party','vote1','vote2','vote3','vote4','vote5','vote6','vote7','vote8','vote9','vote10')
merged.item[is.na(merged.item)] <- 0  #na값을 0으로 만들어줍니다
head(merged.item,20)
merged.item[is.na(merged.item)] <- 0  #na값을 0으로 만들어줍니다
head(merged.item,20)
merged.item <- merged.item[,c(1,2,3,5,7,9,11,13,15,17,19,21)]
colnames(merged.item) <- c('name','party','vote1','vote2','vote3','vote4','vote5','vote6','vote7','vote8','vote9','vote10')
merged.item[is.na(merged.item)] <- 0  #na값을 0으로 만들어줍니다
head(merged.item,20)
merged.item <- merged.item[,-c(1:2)] #계산을 위해 name, party 잠시 배제
result <- matrix(NA,239,239) #내적곱 계산의 용이성을 위한 행렬 선언 : merged.item의 의원 수가 239명이기 때문에 239x239 행렬을 생성
for (a in 1:239){
for (i in 1:239){
result[i,a] <- sum(merged.item[a,]*merged.item[i,])}}
str(result)
df.result<- data.frame(result,stringsAsFactors = F)
str(df.result)
colnames(df.result[1,],merged.item[1,])
df.result<- data.frame(result,stringsAsFactors = F)
str(df.result)
merged.item <- merge(x=item1,y=item2,by='name',all.x= TRUE) #item1과 item2를 name을 기준변수로하고 merge
merged.item <- merge(merged.item,item3,by='name',all.x=TRUE) #같은방식으로 쭉 merge
merged.item <- merge(merged.item,item4,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item5,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item6,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item7,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item8,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item9,by='name',all.x=TRUE)
merged.item <- merge(merged.item,item10,by='name',all.x=TRUE)
merged.item <- merged.item[,c(1,2,3,5,7,9,11,13,15,17,19,21)]
colnames(merged.item) <- c('name','party','vote1','vote2','vote3','vote4','vote5','vote6','vote7','vote8','vote9','vote10')
merged.item[is.na(merged.item)] <- 0  #na값을 0으로 만들어줍니다
head(merged.item,20)
merged.item[is.na(merged.item)] <- 0  #na값을 0으로 만들어줍니다
head(merged.item,20)
